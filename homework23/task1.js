// –ó–∞–¥–∞—á–∞ 1. –î–∞–Ω–æ –∫–ª–∞—Å PhoneNumber. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ string, –ø—Ä–∏ —è–∫–æ–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞ –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä (050‚Ä¶.  ü°™ MTC, 096‚Ä¶ ü°™ Kyivstar, ‚Ä¶.)

class PhoneNumber {
  constructor(number) {
    this.number = String(number);
  }

  [Symbol.toPrimitive](hint) {
    if (hint === "string") {
      if (this.number.startsWith("050") || this.number.startsWith("066")) {
        return `MTC (${this.number})`;
      } else if (
        this.number.startsWith("096") ||
        this.number.startsWith("097") ||
        this.number.startsWith("067")
      ) {
        return `Kyivstar (${this.number})`;
      } else if (
        this.number.startsWith("073") ||
        this.number.startsWith("063")
      ) {
        return `Lifecell (${this.number})`;
      } else {
        return `–ù–µ–≤—ñ–¥–æ–º–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (${this.number})`;
      }
    }
    return this.number;
  }
  toString() {
    return this[Symbol.toPrimitive]("string");
  }
}

const a = new PhoneNumber("0671234567");
console.log(String(a));
console.log("" + a);
console.log(a.toString());
// –ó–∞–¥–∞—á–∞ 2. –î–∞–Ω–æ Shop  -- –∫–ª–∞—Å, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ (–º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ –∫–ª–∞—Å—É Product (–Ω–∞–∑–≤–∞, —Ü—ñ–Ω–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å). –î–æ–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –∫–ª–∞—Å—É Shop, —â–æ–± –ø—Ä–∏ —ñ—Ç–µ—Ä—É–≤–∞–Ω–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤–∏–≤–æ–¥–∏–≤—Å—è —Ä—è–¥–æ–∫ ¬´—Ç–æ–≤–∞—Ä-–∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å¬ª

class Product {
  constructor(name, price, quantity) {
    this.name = name;
    this.price = price;
    this.quantity = quantity;
  }
  getTotal() {
    return this.price * this.quantity;
  }
}

class Shop {
  constructor(products = []) {
    this.products = products;
  }
  [Symbol.iterator]() {
    let index = 0;
    const items = this.products;

    return {
      next() {
        if (index < items.length) {
          const product = items[index++];
          return {
            value: `${product.name} - ${product.getTotal()} –≥—Ä–Ω`,
            done: false,
          };
        } else {
          return { done: true };
        }
      },
    };
  }
}

const shop = new Shop([
  new Product("–ì–æ—Ä—ñ—Ö–∏", 50, 4),
  new Product("–Ø–±–ª—É–∫–∞", 30, 7),
  new Product("–ì—Ä—É—à—ñ", 40, 3),
]);

for (const item of shop) {
  console.log(item);
}
// –ó–∞–¥–∞—á–∞ 3. –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –±–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –ø–æ—Å—Ç—É–ø–æ–≤–æ –≥–µ–Ω–µ—Ä—É–≤–∞–≤ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª.

function* evenNumberGenerator(count) {
  if (!Number.isInteger(count) || count < 0) {
    throw new Error("count –º–∞—î –±—É—Ç–∏ –Ω–µ–≤—ñ–¥'—î–º–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º");
  }

  let generated = 0;

  while (generated < count) {
    const candidate = Math.floor(Math.random() * 1000);
    if (candidate % 2 === 0) {
      yield candidate;
      generated++;
    }
  }
}
for (const n of evenNumberGenerator(5)) {
  console.log(n);
}
const arr = [...evenNumberGenerator(7)];
console.log(arr);
